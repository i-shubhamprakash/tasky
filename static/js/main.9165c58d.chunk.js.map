{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tasks","name","category","todo","doing","done","forEach","task","push","react_default","a","createElement","className","key","draggable","console","log","href","target","App_Todo","App_Doing","App_Done","Component","Todo","Doing","Done","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9165c58d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tasks:[\n        {name:\"Go market\", category:\"todo\"},\n        {name:\"Buy food\", category:\"todo\"},\n        {name:\"Eat dinner\", category:\"todo\"},\n        {name:\"code\", category:\"doing\"},\n        {name:\"Learn React\", category:\"done\"},\n        {name:\"Do Project\", category:\"doing\"},\n        {name:\"Go to sleep\", category:\"todo\"}\n      ]\n    };\n    // This line is important!\n    // this.handleClick = this.handleClick.bind(this);\n  }\n  render() {\n    let tasks={\n      todo:[],\n      doing:[],\n      done: []\n    }\n\n    this.state.tasks.forEach(task => {\n      tasks[task.category].push(\n        <div className=\"task\" key=\"task.name\" draggable>\n          <p className=\"task-text\">{task.name}</p>\n        </div>\n      );  \n    });\n\n    console.log(tasks);\n\n    return (\n      <div className=\"App\">\n        <div className=\"credit\">\n          <div className=\"social\">\n          <a href=\"https://linkedin.com/in/ishubhamprakash/\" target=\"_blank\">\n          <i className=\"fa fa-linkedin\"></i>\n          </a>\n          <a href=\"https://github.com/i-shubhamprakash\" target=\"_blank\">\n          <i className=\"fa fa-github\"></i>\n          </a>\n          <a href=\"https://twitter.com/iSuvm\" target=\"_blank\">\n          <i className=\"fa fa-twitter\"></i>\n          </a>\n          </div>\n        </div>\n      <div className=\"header\">\n        <h1 className=\"h5\"><i className=\"fa fa-tasks\"> </i> Tasky</h1>\n      </div>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col col-12 col-md-4\">\n              <Todo tasks={tasks}/>\n            </div>\n            <div className=\"col col-12 col-md-4\">\n              <Doing tasks={tasks}/>\n            </div>\n            <div className=\"col col-12 col-md-4\">\n              <Done tasks={tasks}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Todo extends Component {\n  render(){\n    return(\n      <div className=\"task-container\">\n        <p>TODO</p><hr/>\n        <div className=\"todo-container task-holder\">\n        {this.props.tasks.todo}\n        </div>\n      </div>\n    );\n  }\n}\nclass Doing extends Component {\n  render(){\n    return(\n      <div className=\"task-container\">\n        <p>DOING</p><hr/>\n        <div className=\"doing-container task-holder\">\n          {this.props.tasks.doing}\n        </div>\n      </div>\n    );\n  }\n}\nclass Done extends Component {\n  render(){\n    return(\n      <div className=\"task-container\">\n      <p>DONE</p><hr/>\n      <div className=\"done-container task-holder\">\n          {this.props.tasks.done}\n      </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}